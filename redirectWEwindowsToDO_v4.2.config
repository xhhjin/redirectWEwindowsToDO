;******************************************************************
;;*********   redirectWEwindowsToDO_v4.2.config.ahk   *************
;;*********   31. August 2021           210831_v4.2   *************
;******************************************************************
; Copyright: autocart (user name at the ahk and XYplorer forums)
; This config file is compatible to any redirectWEwindowsToDO script who's version number starts with "4.2".

; If the following variable is set to 1, then Regular Expressions ("RegEx") are used as compare method.
; If the variable is set to 0 or is undefined, then the "identical" compare method is used.
vUseRegExForPathCompare := 1

/* The following variable holds all the keywords, paths, and patterns that will be compared against the locations of the WE windows. Separated by "|" (pipe character).
Any folder paths must be specified withOUT (!) trailing backslash. (The trailing backslash thing is on the to-do list, so that the user should not have to care about it anymore. However, it is harder to take care of it than one might think.)
*/
; A suggestion for use with the "RegEx" compare method and the "Redirect" action for a match:
vWindowsExplorerPaths := "[A-Z]:\\.*|\\.*|This PC|My Computer|Computer|Dieser PC"

; Following is a suggestion for English keywords with the "identical" compare method and the "Keep" action for a match. To use it, just remove the ";" from the start of the next line.
; vWindowsExplorerPaths := "C:\sample path\folder|All Control Panel Items|Storage Spaces|Sync Center|System|Network and Sharing Center|Programs and Features|Recovery|RemoteApp and Desktop Connections|Security and Maintenance|Speech Recognition|Autoplay|Fonts|Backup and Restore (Windows 7)|Devices and Printers|Dolby Audio|Ease of Access Center|File History|BitLocker Drive Encryption|Color Management|Credential Manager|Device Manager|Action Center|Administrative Tools|Default Programs|Mouse|Power Options|Personalization|User Accounts|Windows 10 Firewall Control|Troubleshooting|Windows Defender Firewall|Windows Firewall|Work Folders"

; Following is a suggestion for German keywords with the "identical" compare method and the "Keep" action for a match. To use it, just remove the ";" from the start of the next line.
; vWindowsExplorerPaths := "C:\beispielhafter Pfad\Ordner|Papierkorb|Systemsteuerung|Alle Systemsteuerungselemente|Anmeldeinformationsverwaltung|Anpassung|Anzeige|Arbeitsordner|Automatische Wiedergabe|Benutzerkonten|BitLocker-Laufwerkverschlüsselung|Center für erleichterte Bedienung|Dateiversionsverlauf|Energieoptionen|Family Safety|Geräte und Drucker|Heimnetzgruppe|Infobereichsymbole|Netzwerk- und Freigabecenter|Problembehandlung|Programme und Features|RemoteApp- und Desktopverbindungen|Schriftarten|Speicherplätze|Sprache|Spracherkennung|Standardprogramme|Standorteinstellungen|Synchronisierungscenter|System|C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Administrative Tools|Wartungscenter|Wiederherstellung|Windows Update|Zu installierende Updates auswählen|Windows-Firewall"

; Following is a suggestion for Spanish keywords with the "identical" compare method and the "Keep" action for a match. To use it, just remove the ";" from the start of the next line.
; vWindowsExplorerPaths := "C:\ruta de carpeta ejemplar\carpeta|Panel de control|Sistema y seguridad|Seguridad y mantenimiento|Firewall de Windows Defender|Sistema|Opciones de energía|Cifrado de unidad BitLocker|Carpetas de trabajo|Redes e Internet|Centro de redes y recursos compartidos|Hardware y sonido|Dispositivos e impresoras|Reproducción automática|Programas|Programas y características|Programas predeterminados|Cuentas de usuario|Administrador de credenciales|Apariencia y personalización|Reloj y región|Accesibilidad|Centro de accesibilidad|Reconocimiento de voz"

; The following variable defines the action that should be taken when a matching WE path was found. Either "Keep" as WE window (in other words: leave it alone) or "Redirect" the WE window to XY.
; vKeepOrRedirect_matchingWEPaths := "Keep"
vKeepOrRedirect_matchingWEPaths := "Redirect"

; When the script is started, it can immediately compare all already existing WE windows against the defined paths and patterns and treat each of them according to the settings. The following variable defines this behavior.
; 1 means yes, the script should also check all existing WE windows at script start. 0 or not defined means no, don't check any existing WE windows at script start.
vApplyRulesToExistingWEwindowsAtScriptStart := 0

/* Some of the following variables can define keyboard-shortcuts (aka "hotkeys").
Each hotkey generally consists of one or more modifiers and a "normal" key.
Hotkey-modifiers can be: "^" stands for Ctrl, "!" stands for Alt, "+" stands for Shift and "#" stands for the Windows key.
The hotkey definition is case sensitive. For a capital char it is better to use the small char together with the "+" modifier.
Extreme expamle: "^!+#h" would stand for Ctrl+Alt+Shift+Win+h (respectively Ctrl+Alt+Win+H)
For more information see https://www.autohotkey.com/docs/Hotkeys.htm#Symbols
*/
; The following two variables can each define a hotkey to manually trigger redirection from WE to XY, respectively, from XY to WE. In each case the source window must be active for the corresponding hotkey to work. Both variables may be set to the same hotkey, so that in both programs the same keyboard buttons trigger the redirection. But, of course, they may also be different.
vHotkeyInWEwindowsToTriggerRedirectionToDO := "^<"
; vHotkeyInWEwindowsToTriggerRedirectionToDO := ""
vHotkeyInXYtabsToTriggerRedirectionToWE := "^<"
; vHotkeyInXYtabsToTriggerRedirectionToWE := ""

; This variable can define a toggle-hotkey to suspend/unsuspend the scripts redirections. This hotkey works independently from the currently active window.
vHotkeyGlobalToSuspendUnsuspendTheWholeScript := "#p"
; vHotkeyGlobalToPauseUnpauseTheWholeScript := ""

; An XY tab can stay open or be closed when a redirection from XY to WE takes place. (BTW, such a redirection XY -> WE can only happen when manually being triggered by the hotkey defined in vHotkeyInXYtabsToTriggerRedirectionToWE - see above.) The following variable defines which of the two things should happen in that case.
; 1 means that an XY tab would be closed. 0 or not defined means that it would stay open.
; However, in case that the tab in XY does not have a real path, the XY tab is never closed, regardless of this variable. Otherwise some information might get lost, if it couldn't be displayed correctly in WE.
vCloseXYtabIfRedirectedToWE := 0

; In case that you want the script to be able to automatically start XYplorer (either because it is not running or because a new instance is desired), then please define the path including the filename to XYplorer.exe in the following variable.
vPathToDOplorerForAutostart := "C:\Program Files\GPSoftware\Directory Opus\dopusrt.exe"

; If the following variable is set to 1, then the paths of any redirected WE windows are opened in read-only instances of XY (aka throw away clones; compare XY file menu > item "Open Throw Away Clone"). One WE path per read-only instance. This is more of an experimental feature to see if this is useful and if it gives users ideas for maybe other similar features
; If the variable is set to 0 or is undefined then the WE windows are redirected to the first XY instance that the script can find (that is either already open or that will be opened by the script in a normal way).
vOpenRedirectedPathsInSeparateReadOnlyXYInstances := 0

; The following variable can hold the name (and path) of a separate ini file for XY read-only instances opened by redirection. (Compare previous variable vOpenRedirectedPathsInSeparateReadOnlyXYInstances.) Thus the XY read-only instances for this purpose can, e.g., have either a simplified or an especially complex layout - whatever one wants. The ini file can be just a base name (filename) or include the extension .ini (filename.ini). If only the name (no path) is defined then the file is looked for in the application data path. According to the XYplorer help file, this path is set to %appdata%\XYplorer by default, which on a typical system (with English locale) is resolved to C:\Users\<user>\AppData\Roaming\XYplorer\ (Win 8 and later). However, I also noticed that for a portable XYplorer "installation" the application data path seems to be the subfolder "Data" in the application path (path of XYplorer.exe). The application data path can be overwritten in the Startup.ini file which can exist in the application path.
; This variable can be left blank in order to use the normal ini file also in read-only instances.
vSeparateIniFileInCaseOfReadOnlyXYInstance := "redirectWEwindowsToDO.ini"

; The following variable defines, whether the file list area in XY should automatically get focus after a redirection, in case some other part of XY has focus at the time. This can be useful, because if the list does *not* have focus, then any selected items might visually not be so easily distinguishable.
; 1 means yes, always focus the XY list area after a redirection. 0 or not defined means no, I don't care where the focus is after a redirection.
vAutofocusListInXYAfterRedirection := 1

; In case that "RegEx" is used as compare method, the following variable can hold exception patterns. Separated by "|" (pipe character).
; For the compare method "identical" this variable has no meaning.
vExceptionPathsInCaseOfRegEx := "\.zip$"